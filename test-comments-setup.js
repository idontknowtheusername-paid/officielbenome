// =====================================================
// SCRIPT DE TEST - SYST√àME DE COMMENTAIRES
// =====================================================
// 
// Ce script teste la configuration de la base de donn√©es
// et les fonctionnalit√©s de base du syst√®me de commentaires

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase (√† adapter selon votre configuration)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCommentsSetup() {
  console.log('üß™ Test du syst√®me de commentaires...\n');

  try {
    // 1. Test de connexion
    console.log('1Ô∏è‚É£ Test de connexion √† Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('comments')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError.message);
      return;
    }
    console.log('‚úÖ Connexion r√©ussie\n');

    // 2. V√©rification des tables
    console.log('2Ô∏è‚É£ V√©rification des tables...');
    
    // Test table comments
    const { data: commentsData, error: commentsError } = await supabase
      .from('comments')
      .select('*')
      .limit(1);
    
    if (commentsError) {
      console.error('‚ùå Erreur table comments:', commentsError.message);
    } else {
      console.log('‚úÖ Table comments accessible');
    }

    // Test table comment_reports
    const { data: reportsData, error: reportsError } = await supabase
      .from('comment_reports')
      .select('*')
      .limit(1);
    
    if (reportsError) {
      console.error('‚ùå Erreur table comment_reports:', reportsError.message);
    } else {
      console.log('‚úÖ Table comment_reports accessible');
    }

    // 3. Test des policies RLS
    console.log('\n3Ô∏è‚É£ Test des policies RLS...');
    
    // Test lecture publique (doit fonctionner sans auth)
    const { data: publicRead, error: publicReadError } = await supabase
      .from('comments')
      .select('*')
      .eq('status', 'approved')
      .limit(1);
    
    if (publicReadError) {
      console.error('‚ùå Erreur lecture publique:', publicReadError.message);
    } else {
      console.log('‚úÖ Lecture publique fonctionnelle');
    }

    // 4. Test de la fonction RPC (si elle existe)
    console.log('\n4Ô∏è‚É£ Test de la fonction RPC...');
    try {
      const { data: statsData, error: statsError } = await supabase
        .rpc('get_listing_comment_stats', { listing_uuid: '00000000-0000-0000-0000-000000000000' });
      
      if (statsError) {
        console.log('‚ö†Ô∏è  Fonction RPC non disponible (normal si pas encore cr√©√©e)');
      } else {
        console.log('‚úÖ Fonction RPC fonctionnelle');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Fonction RPC non disponible (normal si pas encore cr√©√©e)');
    }

    // 5. V√©rification des index
    console.log('\n5Ô∏è‚É£ V√©rification des index...');
    const { data: indexData, error: indexError } = await supabase
      .from('comments')
      .select('listing_id, user_id, status, created_at')
      .eq('status', 'approved')
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (indexError) {
      console.error('‚ùå Erreur lors du test des index:', indexError.message);
    } else {
      console.log('‚úÖ Index fonctionnels');
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes :');
    console.log('1. Ex√©cuter le script SQL dans Supabase');
    console.log('2. Tester l\'interface utilisateur');
    console.log('3. V√©rifier les permissions utilisateur');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Fonction pour tester avec authentification
async function testWithAuth() {
  console.log('\nüîê Test avec authentification...');
  
  // Note: Ce test n√©cessite un utilisateur authentifi√©
  // Vous devrez l'adapter selon votre configuration
  
  console.log('‚ö†Ô∏è  Test d\'authentification √† impl√©menter selon votre configuration');
}

// Ex√©cution des tests
if (import.meta.url === `file://${process.argv[1]}`) {
  testCommentsSetup();
  // testWithAuth(); // D√©commentez si vous voulez tester avec auth
}

export { testCommentsSetup, testWithAuth };
