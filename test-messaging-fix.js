#!/usr/bin/env node

/**
 * Script de test pour v√©rifier les corrections de messagerie
 * Usage: node test-messaging-fix.js
 */

import { readFileSync, existsSync } from 'fs';

console.log('üß™ Test des corrections de messagerie...\n');

// Simulation des erreurs corrig√©es
const testCases = [
  {
    name: 'Test correction cl√©s √©trang√®res',
    description: 'V√©rifier que les r√©f√©rences incorrectes sont supprim√©es',
    test: () => {
      const messageService = readFileSync('src/services/message.service.js', 'utf8');
      
      // V√©rifier que les r√©f√©rences probl√©matiques sont supprim√©es
      const hasInvalidReferences = messageService.includes('conversations_participant1_id_fkey') ||
                                 messageService.includes('conversations_participant2_id_fkey') ||
                                 messageService.includes('messages_sender_id_fkey') ||
                                 messageService.includes('messages_receiver_id_fkey');
      
      if (hasInvalidReferences) {
        throw new Error('‚ùå R√©f√©rences de cl√©s √©trang√®res incorrectes encore pr√©sentes');
      }
      
      return '‚úÖ R√©f√©rences de cl√©s √©trang√®res incorrectes supprim√©es';
    }
  },
  
  {
    name: 'Test gestion d\'erreur am√©lior√©e',
    description: 'V√©rifier que la gestion d\'erreur est robuste',
    test: () => {
      const messageService = readFileSync('src/services/message.service.js', 'utf8');
      
      // V√©rifier la pr√©sence de try/catch
      const hasTryCatch = messageService.includes('try {') && messageService.includes('} catch (error)');
      
      if (!hasTryCatch) {
        throw new Error('‚ùå Gestion d\'erreur try/catch manquante');
      }
      
      return '‚úÖ Gestion d\'erreur try/catch impl√©ment√©e';
    }
  },
  
  {
    name: 'Test logs de d√©bogage',
    description: 'V√©rifier que les logs de d√©bogage sont pr√©sents',
    test: () => {
      const messageService = readFileSync('src/services/message.service.js', 'utf8');
      
      // V√©rifier la pr√©sence de logs
      const hasLogs = messageService.includes('console.log') || messageService.includes('console.error');
      
      if (!hasLogs) {
        throw new Error('‚ùå Logs de d√©bogage manquants');
      }
      
      return '‚úÖ Logs de d√©bogage pr√©sents';
    }
  },
  
  {
    name: 'Test hook useConversations am√©lior√©',
    description: 'V√©rifier que le hook g√®re mieux les erreurs',
    test: () => {
      const useMessages = readFileSync('src/hooks/useMessages.js', 'utf8');
      
      // V√©rifier la pr√©sence de retry logic
      const hasRetryLogic = useMessages.includes('retry:') && useMessages.includes('retryDelay:');
      
      if (!hasRetryLogic) {
        throw new Error('‚ùå Logique de retry manquante dans useConversations');
      }
      
      return '‚úÖ Logique de retry impl√©ment√©e';
    }
  },
  
  {
    name: 'Test page de messagerie am√©lior√©e',
    description: 'V√©rifier que la page g√®re mieux les erreurs',
    test: () => {
      const messagingPage = readFileSync('src/pages/MessagingPage.jsx', 'utf8');
      
      // V√©rifier la pr√©sence de gestion d'erreur contextuelle
      const hasContextualErrorHandling = messagingPage.includes('Session expir√©e') ||
                                       messagingPage.includes('base de donn√©es') ||
                                       messagingPage.includes('Requ√™te invalide');
      
      if (!hasContextualErrorHandling) {
        throw new Error('‚ùå Gestion d\'erreur contextuelle manquante');
      }
      
      return '‚úÖ Gestion d\'erreur contextuelle impl√©ment√©e';
    }
  }
];

// Ex√©cuter tous les tests
async function runTests() {
  let passedTests = 0;
  let totalTests = testCases.length;
  
  for (const testCase of testCases) {
    try {
      console.log(`üìã ${testCase.name}`);
      console.log(`   ${testCase.description}`);
      
      const result = testCase.test();
      console.log(`   ${result}\n`);
      passedTests++;
      
    } catch (error) {
      console.log(`   ${error.message}\n`);
    }
  }
  
  // R√©sum√© des tests
  console.log('üìä R√©sum√© des tests:');
  console.log(`   ‚úÖ Tests r√©ussis: ${passedTests}/${totalTests}`);
  console.log(`   ‚ùå Tests √©chou√©s: ${totalTests - passedTests}/${totalTests}`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ Tous les tests sont pass√©s ! Les corrections de messagerie sont fonctionnelles.');
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les corrections.');
  }
  
  return passedTests === totalTests;
}

// V√©rifier que les fichiers existent
function checkFilesExist() {
  const requiredFiles = [
    'src/services/message.service.js',
    'src/hooks/useMessages.js',
    'src/pages/MessagingPage.jsx'
  ];
  
  for (const file of requiredFiles) {
    if (!existsSync(file)) {
      console.error(`‚ùå Fichier requis manquant: ${file}`);
      return false;
    }
  }
  
  return true;
}

// Ex√©cuter les tests directement
if (checkFilesExist()) {
  runTests().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error);
    process.exit(1);
  });
} else {
  console.error('‚ùå Impossible d\'ex√©cuter les tests - fichiers manquants');
  process.exit(1);
}
