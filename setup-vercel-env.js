// Script pour configurer la variable d'environnement MISTRAL_API_KEY dans Vercel
// Usage: node setup-vercel-env.js

import fetch from 'node-fetch';

const VERCEL_TOKEN = process.env.VERCEL_TOKEN;
const PROJECT_ID = process.env.VERCEL_PROJECT_ID;
const MISTRAL_API_KEY = 'rJHJdTtKsu58p2k1j5jkBmUwyc56z5tP';

async function setupVercelEnv() {
  console.log('üîß Configuration de la variable d\'environnement MISTRAL_API_KEY dans Vercel...\n');

  if (!VERCEL_TOKEN) {
    console.log('‚ùå VERCEL_TOKEN n\'est pas d√©fini');
    console.log('üí° Pour obtenir un token Vercel:');
    console.log('1. Allez sur https://vercel.com/account/tokens');
    console.log('2. Cr√©ez un nouveau token');
    console.log('3. Ex√©cutez: VERCEL_TOKEN=votre_token node setup-vercel-env.js');
    return;
  }

  if (!PROJECT_ID) {
    console.log('‚ùå VERCEL_PROJECT_ID n\'est pas d√©fini');
    console.log('üí° Pour obtenir l\'ID du projet:');
    console.log('1. Allez sur https://vercel.com/dashboard');
    console.log('2. S√©lectionnez votre projet officielbenome');
    console.log('3. Settings > General > Project ID');
    console.log('4. Ex√©cutez: VERCEL_PROJECT_ID=votre_id VERCEL_TOKEN=votre_token node setup-vercel-env.js');
    return;
  }

  try {
    // V√©rifier les variables d'environnement existantes
    console.log('1. V√©rification des variables d\'environnement existantes...');
    const envResponse = await fetch(`https://api.vercel.com/v10/projects/${PROJECT_ID}/env`, {
      headers: {
        'Authorization': `Bearer ${VERCEL_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!envResponse.ok) {
      throw new Error(`Erreur API Vercel: ${envResponse.status} ${envResponse.statusText}`);
    }

    const envVars = await envResponse.json();
    const existingMistralKey = envVars.envs?.find(env => env.key === 'MISTRAL_API_KEY');

    if (existingMistralKey) {
      console.log('‚úÖ MISTRAL_API_KEY existe d√©j√†');
      console.log(`   ID: ${existingMistralKey.id}`);
      console.log(`   Environnements: ${existingMistralKey.target.join(', ')}`);
      
      // Mettre √† jour si n√©cessaire
      if (existingMistralKey.value !== MISTRAL_API_KEY) {
        console.log('üîÑ Mise √† jour de la valeur...');
        const updateResponse = await fetch(`https://api.vercel.com/v10/projects/${PROJECT_ID}/env/${existingMistralKey.id}`, {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${VERCEL_TOKEN}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            value: MISTRAL_API_KEY
          })
        });

        if (updateResponse.ok) {
          console.log('‚úÖ MISTRAL_API_KEY mise √† jour avec succ√®s');
        } else {
          throw new Error(`Erreur mise √† jour: ${updateResponse.status}`);
        }
      } else {
        console.log('‚úÖ Valeur d√©j√† correcte');
      }
    } else {
      console.log('üìù Cr√©ation de MISTRAL_API_KEY...');
      
      // Cr√©er la nouvelle variable
      const createResponse = await fetch(`https://api.vercel.com/v10/projects/${PROJECT_ID}/env`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${VERCEL_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          key: 'MISTRAL_API_KEY',
          value: MISTRAL_API_KEY,
          target: ['production', 'preview']
        })
      });

      if (createResponse.ok) {
        console.log('‚úÖ MISTRAL_API_KEY cr√©√©e avec succ√®s');
      } else {
        const errorData = await createResponse.json().catch(() => ({}));
        throw new Error(`Erreur cr√©ation: ${createResponse.status} - ${errorData.error || 'Erreur inconnue'}`);
      }
    }

    console.log('\n2. D√©clenchement du red√©ploiement...');
    const deployResponse = await fetch(`https://api.vercel.com/v13/deployments`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${VERCEL_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: 'officielbenome',
        projectId: PROJECT_ID
      })
    });

    if (deployResponse.ok) {
      const deployData = await deployResponse.json();
      console.log('‚úÖ Red√©ploiement d√©clench√©');
      console.log(`   URL: https://vercel.com/dashboard/project/${PROJECT_ID}/deployments/${deployData.id}`);
    } else {
      console.log('‚ö†Ô∏è Impossible de d√©clencher le red√©ploiement automatique');
      console.log('üí° Red√©ployez manuellement depuis le dashboard Vercel');
    }

    console.log('\nüéâ Configuration termin√©e !');
    console.log('üìã Prochaines √©tapes:');
    console.log('1. Attendez que le d√©ploiement se termine (2-3 minutes)');
    console.log('2. Testez le chatbot sur https://officielbenome.vercel.app');
    console.log('3. V√©rifiez avec: node debug-vercel.js');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.log('\nüí° Configuration manuelle:');
    console.log('1. Allez sur https://vercel.com/dashboard');
    console.log('2. S√©lectionnez officielbenome');
    console.log('3. Settings > Environment Variables');
    console.log('4. Ajoutez MISTRAL_API_KEY = rJHJdTtKsu58p2k1j5jkBmUwyc56z5tP');
    console.log('5. Red√©ployez');
  }
}

// Instructions d'utilisation
if (!VERCEL_TOKEN || !PROJECT_ID) {
  console.log('üîß Configuration automatique de MISTRAL_API_KEY dans Vercel\n');
  console.log('üìã Pr√©requis:');
  console.log('1. Token Vercel: https://vercel.com/account/tokens');
  console.log('2. ID du projet: https://vercel.com/dashboard > officielbenome > Settings > General > Project ID\n');
  console.log('üíª Usage:');
  console.log('VERCEL_TOKEN=votre_token VERCEL_PROJECT_ID=votre_id node setup-vercel-env.js\n');
  console.log('üîç Ou configurez manuellement:');
  console.log('1. https://vercel.com/dashboard > officielbenome > Settings > Environment Variables');
  console.log('2. Ajoutez: MISTRAL_API_KEY = rJHJdTtKsu58p2k1j5jkBmUwyc56z5tP');
  console.log('3. Red√©ployez');
} else {
  setupVercelEnv();
} 