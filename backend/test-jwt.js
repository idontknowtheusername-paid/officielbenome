import JwtService from './services/jwt.service.js';
import { JWT_CONFIG } from './config/constants.js';

// Test simple du service JWT
async function testJWT() {
  try {
    console.log('üß™ Test du service JWT...');
    
    // Simuler un utilisateur
    const mockUser = {
      id: 'test-user-id',
      role: 'user'
    };
    
    console.log('üìã Configuration JWT:');
    console.log('  JWT_SECRET:', process.env.JWT_SECRET ? '[D√âFINI]' : '[NON D√âFINI]');
    console.log('  JWT_REFRESH_SECRET:', process.env.JWT_REFRESH_SECRET ? '[D√âFINI]' : '[NON D√âFINI]');
    console.log('  JWT_CONFIG.REFRESH_SECRET:', JWT_CONFIG.REFRESH_SECRET);
    
    // Tester la g√©n√©ration de tokens
    console.log('\nüîÑ G√©n√©ration de tokens...');
    const tokens = await JwtService.generateTokens(mockUser);
    
    console.log('‚úÖ Tokens g√©n√©r√©s avec succ√®s:');
    console.log('  Access Token:', tokens.accessToken ? '[G√âN√âR√â]' : '[√âCHEC]');
    console.log('  Refresh Token:', tokens.refreshToken ? '[G√âN√âR√â]' : '[√âCHEC]');
    
    // Tester la v√©rification du token d'acc√®s
    console.log('\nüîç V√©rification du token d\'acc√®s...');
    const decodedAccess = await JwtService.verifyAccessToken(tokens.accessToken);
    console.log('‚úÖ Token d\'acc√®s valide:', decodedAccess);
    
    // Tester la v√©rification du refresh token
    console.log('\nüîç V√©rification du refresh token...');
    const decodedRefresh = await JwtService.verifyRefreshToken(tokens.refreshToken);
    console.log('‚úÖ Refresh token valide:', decodedRefresh);
    
    console.log('\nüéâ Tous les tests JWT sont pass√©s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test JWT:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Ex√©cuter le test
testJWT(); 